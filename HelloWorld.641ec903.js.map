{"mappings":"6cAAA,IAAAA,EAAAC,EAAA,S,oDAUA,MAAMC,EAAQ,IAAIC,E,YAAJ,CAAW,CACvBC,IAAK,CAAEC,EAAG,EAAGC,EAAG,GAChBC,MAAO,GACPC,OAAQ,GACRC,MAAO,CAACC,KAAKC,SAAUD,KAAKC,SAAUD,KAAKC,SAAU,KAGjDC,EAAO,EAACC,OAAEA,EAAMC,UAAEA,MACtB,MAAMC,EAAKF,EAAOG,WAAW,UACvBC,EAAUC,EAAAC,WAAWC,yBAAyBL,EAAI,CAACZ,EAAAkB,GAAWlB,EAAAmB,KAC9DC,EAA4BR,EAAGS,kBAAkBP,EAAS,YAC1DQ,EAA4BV,EAAGW,mBAAmBT,EAAS,gBAC3DU,EAAgBZ,EAAGW,mBAAmBT,EAAS,WAC/CW,EAAiBb,EAAGc,eACpBC,EAAMf,EAAGgB,oBACfhB,EAAGiB,gBAAgBF,GACnBf,EAAGkB,wBAAwBV,GAC3BR,EAAGmB,WAAWnB,EAAGoB,aAAcP,GAC/Bb,EAAGqB,oBAAoBb,EAA2B,EAAGR,EAAGsB,OAAO,EAAO,EAAG,GAEzE,MAAMC,EAAY,EAAClC,IAAEA,EAAGG,MAAEA,EAAKC,OAAEA,EAAMC,MAAEA,MACvCS,EAAAC,WAAWoB,0BAA0BxB,EAAGF,QACxCE,EAAGyB,SAAS,EAAG,EAAGzB,EAAGF,OAAON,MAAOQ,EAAGF,OAAOL,QAC7CO,EAAG0B,WAAW,EAAG,EAAG,EAAG,GACvB1B,EAAG2B,MAAM3B,EAAG4B,iBAAmB5B,EAAG6B,kBAClC7B,EAAG8B,WAAW5B,GACdF,EAAGiB,gBAAgBF,GACnBf,EAAG+B,UAAUrB,EAA2BV,EAAGF,OAAON,MAAOQ,EAAGF,OAAOL,QACnEO,EAAGmB,WAAWnB,EAAGoB,aAAcP,GAC/B,MAAMmB,EAAK3C,EAAIC,EACT2C,EAAKD,EAAKxC,EACV0C,EAAK7C,EAAIE,EACT4C,EAAKD,EAAKzC,EACV2C,EAAO,CAACJ,EAAIE,EAAID,EAAIC,EAAIF,EAAIG,EAAIH,EAAIG,EAAIF,EAAIC,EAAID,EAAIE,GAC1DnC,EAAGqC,WAAWrC,EAAGoB,aAAc,IAAIkB,aAAaF,GAAOpC,EAAGuC,aAC1DvC,EAAGwC,WAAW5B,EAAelB,GAC7B,MAAM+C,EAAgBzC,EAAG0C,UAGzB1C,EAAG2C,WAAWF,EAFC,EACD,EAC6B,EAG7CtD,EAAMyD,GAAG,UAAU,IAAMrB,EAAUpC,EAAM0D,YACzCtB,EAAUpC,EAAM0D,UAChBC,aAAY,IAAMvB,EAAUpC,EAAM0D,WAAW,IAAI,E,IAoCnDE,EAjCmB,KACjB3D,EAAA4D,GAAMC,WAAU,KACd,MAAMnD,EAASoD,SAASC,cAAc,UAChCpD,EAAYmD,SAASC,cAAc,cACzC,GAAItD,EAAM,CACR,MAAMuD,EAAUvD,EAAK,C,OAAEC,E,UAAQC,IAC/B,MAAO,KACkB,mBAAZqD,GACTA,GAAS,C,MAiBf,EAAAnE,EAAAoE,KAAApE,EAAAqE,SAAA,C,UACE,EAAArE,EAAAoE,KAAC,MAAG,CAACE,GAAG,Y,UACN,EAAAtE,EAAAoE,KAAC,SAAM,Q,sCCrDd,IAASG,EAAMC,EAAND,EAUPE,EAAAC,QAVaF,EAUP,WAGP,MAAMG,EAAYC,KAIlB,IAAoBC,EAcpB,SAASC,EAAMC,GACTJ,EAAUK,UACRL,EAAUK,QAAQF,MACpBH,EAAUK,QAAQF,MAAMC,GACfJ,EAAUK,QAAQC,KAC3BN,EAAUK,QAAQC,IAAIF,G,CAoB5B,SAASG,EAAWnE,EAAIoE,EAAcC,EAAYC,GAChD,MAAMC,EAAQD,GAAqBP,EAE7BS,EAASxE,EAAGyE,aAAaJ,GAU/B,OAPArE,EAAGoE,aAAaI,EAAQJ,GAGxBpE,EAAG0E,cAAcF,GAGAxE,EAAG2E,mBAAmBH,EAAQxE,EAAG4E,gBAS3CJ,GALLD,EAAM,+BAAiCC,EAAS,KAD9BxE,EAAG6E,iBAAiBL,IAEtCxE,EAAG8E,aAAaN,GACT,K,CAgBX,SAASO,EAAc/E,EAAIgF,EAASC,EAAaC,EAAeZ,GAC9D,MAAMC,EAAQD,GAAqBP,EAC7B7D,EAAUF,EAAG+E,gBAanB,OAZAC,EAAQG,SAAQ,SAAUX,GACxBxE,EAAGoF,aAAalF,EAASsE,E,IAEvBS,GACFA,EAAYE,SAAQ,SAAUE,EAAQC,GACpCtF,EAAGuF,mBAAmBrF,EAASgF,EAAgBA,EAAcI,GAAOA,EAAKD,E,IAG7ErF,EAAGwF,YAAYtF,GAGAF,EAAGyF,oBAAoBvF,EAASF,EAAG0F,aAS3CxF,GALLqE,EAAM,4BADYvE,EAAG2F,kBAAkBzF,IAGvCF,EAAG4F,cAAc1F,GACV,K,CAcX,SAAS2F,EAAuB7F,EAAI8F,EAAUC,EAAgBzB,GAC5D,IACID,EADAD,EAAe,GAEnB,MAAM4B,EAAe9C,SAAS+C,eAAeH,GAC7C,IAAKE,EACH,KAAM,oCAAsCF,EAI9C,GAFA1B,EAAe4B,EAAaE,MAEvBH,EACH,GAA0B,sBAAtBC,EAAaG,KACf9B,EAAarE,EAAGoG,mBACX,GAA0B,wBAAtBJ,EAAaG,KACtB9B,EAAarE,EAAGqG,qBACX,GAAIhC,IAAerE,EAAGoG,eAAiB/B,IAAerE,EAAGqG,gBAC9D,KAAM,iCAIV,OAAOlC,EAAWnE,EAAIoE,EAAc2B,GAAkB1B,EAAYC,E,EA9HlER,EAAIA,GAAKF,KACIE,EAAEwC,MAIfrC,QAAQC,IAAI,OAAQ,+BAAgC,sCACpDD,QAAQC,IAAI,OAAQ,+BAAgC,uEA2HtD,MAAMqC,EAAoB,CAAC,gBAAiB,mBAuF5C,MAAO,CACLxB,cAAeA,EACfyB,yBAxEF,SACExG,EACAyG,EACAxB,EACAC,EACAZ,GAEA,MAAMU,EAAU,GAChB,IAAK,IAAI0B,EAAK,EAAGA,EAAKD,EAAgBE,SAAUD,EAC9C1B,EAAQ4B,KACNf,EACE7F,EACAyG,EAAgBC,GAChB1G,EAAGuG,EAAkBG,IACrBpC,IAIN,OAAOS,EAAc/E,EAAIgF,EAASC,EAAaC,EAAeZ,E,EAuD9DjE,yBArCF,SACEL,EACA6G,EACA5B,EACAC,EACAZ,GAEA,MAAMU,EAAU,GAChB,IAAK,IAAI0B,EAAK,EAAGA,EAAKG,EAAcF,SAAUD,EAC5C1B,EAAQ4B,KAAKzC,EAAWnE,EAAI6G,EAAcH,GAAK1G,EAAGuG,EAAkBG,IAAMpC,IAE5E,OAAOS,EAAc/E,EAAIgF,EAASC,EAAaC,EAAeZ,E,EA2B9D9C,0BAhBF,SAAmC1B,EAAQgH,GACzCA,EAAaA,GAAc,EAC3B,MAAMtH,EAAQM,EAAQiH,YAAcD,EAAc,EAC5CrH,EAASK,EAAQkH,aAAeF,EAAc,EACpD,OAAIhH,EAAON,QAAUA,GAASM,EAAOL,SAAWA,KAC9CK,EAAON,MAAQA,EACfM,EAAOL,OAASA,GACT,E,IApOW,mBAAXwH,QAAyBA,OAAOC,IAEzCD,OAAO,IAAI,WACT,OAAOxD,EAAQ0D,KAAK3D,E,IAItBA,EAAKpD,WAAaqD,EAAQ0D,KAAK3D,E,sCCvCnCE,EAAAC,QAAe,2sB,sCCAfD,EAAAC,QAAe,4nC","sources":["src/pages/hello-world/HelloWorld.js","src/pages/hello-world/webgl-utils.js","src/pages/hello-world/vs.glsl","src/pages/hello-world/fs.glsl"],"sourcesContent":["import React from 'react'\nimport { webglUtils } from './webgl-utils.js'\n// import UpDownLeftRight from '-/components/controls/up-down-left-right'\n\n// import Example from '-/components/example'\n// import notes from './readme.md'\nimport vtxShader from './vs.glsl'\nimport fragShader from './fs.glsl'\nimport Baobab from 'baobab'\n\nconst state = new Baobab({\n  pos: { x: 0, y: 0 },\n  width: 50,\n  height: 50,\n  color: [Math.random(), Math.random(), Math.random(), 1],\n})\n\nconst init = ({ canvas, container }) => {\n  const gl = canvas.getContext('webgl2')\n  const program = webglUtils.createProgramFromSources(gl, [vtxShader, fragShader])\n  const positionAttributeLocation = gl.getAttribLocation(program, 'position')\n  const resolutionUniformLocation = gl.getUniformLocation(program, 'u_resolution')\n  const colorLocation = gl.getUniformLocation(program, 'u_color')\n  const positionBuffer = gl.createBuffer()\n  const vao = gl.createVertexArray()\n  gl.bindVertexArray(vao)\n  gl.enableVertexAttribArray(positionAttributeLocation)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n  gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)\n\n  const drawScene = ({ pos, width, height, color }) => {\n    webglUtils.resizeCanvasToDisplaySize(gl.canvas)\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.clearColor(0, 0, 0, 1)\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n    gl.useProgram(program)\n    gl.bindVertexArray(vao)\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height)\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    const x1 = pos.x\n    const x2 = x1 + width\n    const y1 = pos.y\n    const y2 = y1 + height\n    const quad = [x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2]\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(quad), gl.STATIC_DRAW)\n    gl.uniform4fv(colorLocation, color)\n    const primitiveType = gl.TRIANGLES\n    const offset = 0\n    const count = 6\n    gl.drawArrays(primitiveType, offset, count)\n  }\n\n  state.on('update', () => drawScene(state.toJSON()))\n  drawScene(state.toJSON())\n  setInterval(() => drawScene(state.toJSON()), 3e3)\n}\n\nconst HelloWorld = () => {\n  React.useEffect(() => {\n    const canvas = document.querySelector('canvas')\n    const container = document.querySelector('#container')\n    if (init) {\n      const dispose = init({ canvas, container })\n      return () => {\n        if (typeof dispose === 'function') {\n          dispose()\n        }\n      }\n    }\n  })\n  // const Controls = () => (\n  //   <UpDownLeftRight\n  //     onLeft={() => state.select(['pos', 'x']).apply((x) => x - 50)}\n  //     onRight={() => state.select(['pos', 'x']).apply((x) => x + 50)}\n  //     onUp={() => state.select(['pos', 'y']).apply((x) => x - 50)}\n  //     onDown={() => state.select(['pos', 'y']).apply((x) => x + 50)}\n  //   />\n  // )\n  // const components = {\n  //   Controls,\n  // }\n  return (\n    <>\n      <div id=\"container\">\n        <canvas />\n      </div>\n    </>\n  )\n}\n\nexport default HelloWorld\n","/*\n * Copyright 2012, Gregg Tavares.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Gregg Tavares. nor the names of his\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n(function(root, factory) {  // eslint-disable-line\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return factory.call(root)\n    })\n  } else {\n    // Browser globals\n    root.webglUtils = factory.call(root)\n  }\n})(this, function () {\n  'use strict'\n\n  const topWindow = this\n\n  /** @module webgl-utils */\n\n  function isInIFrame(w) {\n    w = w || topWindow\n    return w !== w.top\n  }\n\n  if (!isInIFrame()) {\n    console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'for more about webgl-utils.js see:');  // eslint-disable-line\n    console.log(\"%c%s\", 'color:blue;font-weight:bold;', 'http://webgl2fundamentals.org/webgl/lessons/webgl-boilerplate.html');  // eslint-disable-line\n  }\n\n  /**\n   * Wrapped logging function.\n   * @param {string} msg The message to log.\n   */\n  function error(msg) {\n    if (topWindow.console) {\n      if (topWindow.console.error) {\n        topWindow.console.error(msg)\n      } else if (topWindow.console.log) {\n        topWindow.console.log(msg)\n      }\n    }\n  }\n\n  /**\n   * Error Callback\n   * @callback ErrorCallback\n   * @param {string} msg error message.\n   * @memberOf module:webgl-utils\n   */\n\n  /**\n   * Loads a shader.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} shaderSource The shader source.\n   * @param {number} shaderType The type of shader.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n    const errFn = opt_errorCallback || error\n    // Create the shader object\n    const shader = gl.createShader(shaderType)\n\n    // Load the shader source\n    gl.shaderSource(shader, shaderSource)\n\n    // Compile the shader\n    gl.compileShader(shader)\n\n    // Check the compile status\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    if (!compiled) {\n      // Something went wrong during compilation; get the error\n      const lastError = gl.getShaderInfoLog(shader)\n      errFn(\"*** Error compiling shader '\" + shader + \"':\" + lastError)\n      gl.deleteShader(shader)\n      return null\n    }\n\n    return shader\n  }\n\n  /**\n   * Creates a program, attaches shaders, binds attrib locations, links the\n   * program and calls useProgram.\n   * @param {WebGLShader[]} shaders The shaders to attach\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @memberOf module:webgl-utils\n   */\n  function createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n    const errFn = opt_errorCallback || error\n    const program = gl.createProgram()\n    shaders.forEach(function (shader) {\n      gl.attachShader(program, shader)\n    })\n    if (opt_attribs) {\n      opt_attribs.forEach(function (attrib, ndx) {\n        gl.bindAttribLocation(program, opt_locations ? opt_locations[ndx] : ndx, attrib)\n      })\n    }\n    gl.linkProgram(program)\n\n    // Check the link status\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS)\n    if (!linked) {\n      // something went wrong with the link\n      const lastError = gl.getProgramInfoLog(program)\n      errFn('Error in program linking:' + lastError)\n\n      gl.deleteProgram(program)\n      return null\n    }\n    return program\n  }\n\n  /**\n   * Loads a shader from a script tag.\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n   * @param {string} scriptId The id of the script tag.\n   * @param {number} opt_shaderType The type of shader. If not passed in it will\n   *     be derived from the type of the script tag.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors.\n   * @return {WebGLShader} The created shader.\n   */\n  function createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n    let shaderSource = ''\n    let shaderType\n    const shaderScript = document.getElementById(scriptId)\n    if (!shaderScript) {\n      throw '*** Error: unknown script element' + scriptId\n    }\n    shaderSource = shaderScript.text\n\n    if (!opt_shaderType) {\n      if (shaderScript.type === 'x-shader/x-vertex') {\n        shaderType = gl.VERTEX_SHADER\n      } else if (shaderScript.type === 'x-shader/x-fragment') {\n        shaderType = gl.FRAGMENT_SHADER\n      } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {\n        throw '*** Error: unknown shader type'\n      }\n    }\n\n    return loadShader(gl, shaderSource, opt_shaderType || shaderType, opt_errorCallback)\n  }\n\n  const defaultShaderType = ['VERTEX_SHADER', 'FRAGMENT_SHADER']\n\n  /**\n   * Creates a program from 2 script tags.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderScriptIds Array of ids of the script\n   *        tags for the shaders. The first is assumed to be the\n   *        vertex shader, the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n  function createProgramFromScripts(\n    gl,\n    shaderScriptIds,\n    opt_attribs,\n    opt_locations,\n    opt_errorCallback\n  ) {\n    const shaders = []\n    for (let ii = 0; ii < shaderScriptIds.length; ++ii) {\n      shaders.push(\n        createShaderFromScript(\n          gl,\n          shaderScriptIds[ii],\n          gl[defaultShaderType[ii]],\n          opt_errorCallback\n        )\n      )\n    }\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback)\n  }\n\n  /**\n   * Creates a program from 2 sources.\n   *\n   * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n   *        to use.\n   * @param {string[]} shaderSourcess Array of sources for the\n   *        shaders. The first is assumed to be the vertex shader,\n   *        the second the fragment shader.\n   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in\n   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n   * @param {module:webgl-utils.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console\n   *        on error. If you want something else pass an callback. It's passed an error message.\n   * @return {WebGLProgram} The created program.\n   * @memberOf module:webgl-utils\n   */\n  function createProgramFromSources(\n    gl,\n    shaderSources,\n    opt_attribs,\n    opt_locations,\n    opt_errorCallback\n  ) {\n    const shaders = []\n    for (let ii = 0; ii < shaderSources.length; ++ii) {\n      shaders.push(loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], opt_errorCallback))\n    }\n    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback)\n  }\n\n  /**\n   * Resize a canvas to match the size its displayed.\n   * @param {HTMLCanvasElement} canvas The canvas to resize.\n   * @param {number} [multiplier] amount to multiply by.\n   *    Pass in window.devicePixelRatio for native pixels.\n   * @return {boolean} true if the canvas was resized.\n   * @memberOf module:webgl-utils\n   */\n  function resizeCanvasToDisplaySize(canvas, multiplier) {\n    multiplier = multiplier || 1\n    const width = (canvas.clientWidth * multiplier) | 0\n    const height = (canvas.clientHeight * multiplier) | 0\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width\n      canvas.height = height\n      return true\n    }\n    return false\n  }\n\n  return {\n    createProgram: createProgram,\n    createProgramFromScripts: createProgramFromScripts,\n    createProgramFromSources: createProgramFromSources,\n    resizeCanvasToDisplaySize: resizeCanvasToDisplaySize,\n  }\n})\n","uniform mat4 u_worldViewProjection;\nuniform vec3 u_lightWorldPos;\nuniform mat4 u_world;\nuniform mat4 u_viewInverse;\nuniform mat4 u_worldInverseTranspose;\nattribute vec4 position;\nattribute vec3 normal;\nattribute vec2 texcoord;\nvarying vec4 v_position;\nvarying vec2 v_texCoord;\nvarying vec3 v_normal;\nvarying vec3 v_surfaceToLight;\nvarying vec3 v_surfaceToView;\nvoid main() {\n  v_texCoord = texcoord;\n  v_position = u_worldViewProjection * position;\n  v_normal = (u_worldInverseTranspose * vec4(normal, 0)).xyz;\n  v_surfaceToLight = u_lightWorldPos - (u_world * position).xyz;\n  v_surfaceToView = (u_viewInverse[3] - (u_world * position)).xyz;\n  gl_Position = v_position;\n}\n","precision mediump float;\nvarying vec4 v_position;\nvarying vec2 v_texCoord;\nvarying vec3 v_normal;\nvarying vec3 v_surfaceToLight;\nvarying vec3 v_surfaceToView;\nuniform vec4 u_lightColor;\nuniform vec4 u_ambient;\nuniform sampler2D u_diffuse;\nuniform vec4 u_specular;\nuniform float u_shininess;\nuniform float u_specularFactor;\nvec4 lit(float l ,float h, float m) {\n  return vec4(1.0,\n              max(l, 0.0),\n              (l > 0.0) ? pow(max(0.0, h), m) : 0.0,\n              1.0);\n}\nvoid main() {\n  vec4 diffuseColor = texture2D(u_diffuse, v_texCoord);\n  vec3 a_normal = normalize(v_normal);\n  vec3 surfaceToLight = normalize(v_surfaceToLight);\n  vec3 surfaceToView = normalize(v_surfaceToView);\n  vec3 halfVector = normalize(surfaceToLight + surfaceToView);\n  vec4 litR = lit(dot(a_normal, surfaceToLight),\n                  dot(a_normal, halfVector), u_shininess);\n\n  vec4 outColor = vec4((\n    u_lightColor * (diffuseColor * litR.y + diffuseColor * u_ambient +\n                    u_specular * litR.z * u_specularFactor)).rgb,\n    diffuseColor.a);\n\n  gl_FragColor = vec4(1.0,1.0,1.0,1.0);\n}\n"],"names":["$4sdSv","parcelRequire","$15c618033b118278$var$state","$parcel$interopDefault","pos","x","y","width","height","color","Math","random","$15c618033b118278$var$init","canvas","container","gl","getContext","program","$2mQBY","webglUtils","createProgramFromSources","$fPhPQ","$b6ZU0","positionAttributeLocation","getAttribLocation","resolutionUniformLocation","getUniformLocation","colorLocation","positionBuffer","createBuffer","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","drawScene","resizeCanvasToDisplaySize","viewport","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","useProgram","uniform2f","x1","x2","y1","y2","quad","bufferData","Float32Array","STATIC_DRAW","uniform4fv","primitiveType","TRIANGLES","drawArrays","on","toJSON","setInterval","$15c618033b118278$export$2e2bcd8739ae039","$39Sww","useEffect","document","querySelector","dispose","jsx","Fragment","id","root","factory","module","exports","topWindow","this","w","error","msg","console","log","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","shaders","opt_attribs","opt_locations","forEach","attachShader","attrib","ndx","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","getElementById","text","type","VERTEX_SHADER","FRAGMENT_SHADER","top","defaultShaderType","createProgramFromScripts","shaderScriptIds","ii","length","push","shaderSources","multiplier","clientWidth","clientHeight","define","amd","call"],"version":3,"file":"HelloWorld.641ec903.js.map"}